
5110LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f0  00800060  0000049a  0000050e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001081  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009a9  00000000  00000000  000018f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a12  00000000  00000000  0000229e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00002cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bb  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009bb  00000000  00000000  0000334f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003d0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	3f 01       	movw	r6, r30
  56:	58 01       	movw	r10, r16
  58:	71 01       	movw	r14, r2
  5a:	8a 01       	movw	r16, r20
  5c:	a2 01       	movw	r20, r4
  5e:	a2 01       	movw	r20, r4
  60:	a2 01       	movw	r20, r4
  62:	a2 01       	movw	r20, r4
  64:	a2 01       	movw	r20, r4
  66:	a2 01       	movw	r20, r4
  68:	a2 01       	movw	r20, r4
  6a:	a2 01       	movw	r20, r4
  6c:	a2 01       	movw	r20, r4
  6e:	a2 01       	movw	r20, r4
  70:	a2 01       	movw	r20, r4
  72:	a2 01       	movw	r20, r4
  74:	a2 01       	movw	r20, r4
  76:	a2 01       	movw	r20, r4
  78:	a2 01       	movw	r20, r4
  7a:	a2 01       	movw	r20, r4
  7c:	a2 01       	movw	r20, r4
  7e:	a2 01       	movw	r20, r4
  80:	a2 01       	movw	r20, r4
  82:	a2 01       	movw	r20, r4
  84:	a2 01       	movw	r20, r4
  86:	a2 01       	movw	r20, r4
  88:	a2 01       	movw	r20, r4
  8a:	a2 01       	movw	r20, r4
  8c:	a2 01       	movw	r20, r4
  8e:	a2 01       	movw	r20, r4
  90:	a2 01       	movw	r20, r4
  92:	a2 01       	movw	r20, r4
  94:	3f 01       	movw	r6, r30
  96:	58 01       	movw	r10, r16
  98:	71 01       	movw	r14, r2
  9a:	8a 01       	movw	r16, r20
  9c:	af 01       	movw	r20, r30
  9e:	c8 01       	movw	r24, r16
  a0:	e1 01       	movw	r28, r2
  a2:	fa 01       	movw	r30, r20
  a4:	12 02       	muls	r17, r18
  a6:	12 02       	muls	r17, r18
  a8:	12 02       	muls	r17, r18
  aa:	12 02       	muls	r17, r18
  ac:	12 02       	muls	r17, r18
  ae:	12 02       	muls	r17, r18
  b0:	12 02       	muls	r17, r18
  b2:	12 02       	muls	r17, r18
  b4:	12 02       	muls	r17, r18
  b6:	12 02       	muls	r17, r18
  b8:	12 02       	muls	r17, r18
  ba:	12 02       	muls	r17, r18
  bc:	12 02       	muls	r17, r18
  be:	12 02       	muls	r17, r18
  c0:	12 02       	muls	r17, r18
  c2:	12 02       	muls	r17, r18
  c4:	12 02       	muls	r17, r18
  c6:	12 02       	muls	r17, r18
  c8:	12 02       	muls	r17, r18
  ca:	12 02       	muls	r17, r18
  cc:	12 02       	muls	r17, r18
  ce:	12 02       	muls	r17, r18
  d0:	12 02       	muls	r17, r18
  d2:	12 02       	muls	r17, r18
  d4:	12 02       	muls	r17, r18
  d6:	12 02       	muls	r17, r18
  d8:	12 02       	muls	r17, r18
  da:	12 02       	muls	r17, r18
  dc:	af 01       	movw	r20, r30
  de:	c8 01       	movw	r24, r16
  e0:	e1 01       	movw	r28, r2
  e2:	fa 01       	movw	r30, r20

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	ea e9       	ldi	r30, 0x9A	; 154
  f8:	f4 e0       	ldi	r31, 0x04	; 4
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a0 35       	cpi	r26, 0x50	; 80
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>
 106:	0e 94 13 02 	call	0x426	; 0x426 <main>
 10a:	0c 94 4b 02 	jmp	0x496	; 0x496 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <LCD5110_send>:
#include "SPI_driver.h"
#define F_CPU 8000000UL
#include <util/delay.h>
#include "SPI_driver.h"

void LCD5110_send(unsigned char data, unsigned char mode){
 112:	cf 93       	push	r28
 114:	c8 2f       	mov	r28, r24
	if(mode == LCD_CMD) {
 116:	61 11       	cpse	r22, r1
 118:	06 c0       	rjmp	.+12     	; 0x126 <LCD5110_send+0x14>
		DIO_write(LCD_PORT, LCD_DC, 0); // Command mode
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	82 e4       	ldi	r24, 0x42	; 66
 120:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_write>
 124:	05 c0       	rjmp	.+10     	; 0x130 <LCD5110_send+0x1e>
		} else {
		DIO_write(LCD_PORT, LCD_DC, 1);  // Data mode
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	82 e4       	ldi	r24, 0x42	; 66
 12c:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_write>
	}
	DIO_write(LCD_PORT, LCD_CE, 0);
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	64 e0       	ldi	r22, 0x04	; 4
 134:	82 e4       	ldi	r24, 0x42	; 66
 136:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_write>
	spi_master_send(data);
 13a:	8c 2f       	mov	r24, r28
 13c:	0e 94 41 02 	call	0x482	; 0x482 <spi_master_send>
	DIO_write(LCD_PORT, LCD_CE, 1);
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	64 e0       	ldi	r22, 0x04	; 4
 144:	82 e4       	ldi	r24, 0x42	; 66
 146:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_write>
}
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <LCD5110_init>:

void LCD5110_init(){
	DIO_setpindir(LCD_PORT, LCD_CE, 1);
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	64 e0       	ldi	r22, 0x04	; 4
 152:	82 e4       	ldi	r24, 0x42	; 66
 154:	0e 94 33 01 	call	0x266	; 0x266 <DIO_setpindir>
	DIO_setpindir(LCD_PORT, LCD_RST, 1);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	82 e4       	ldi	r24, 0x42	; 66
 15e:	0e 94 33 01 	call	0x266	; 0x266 <DIO_setpindir>
	DIO_setpindir(LCD_PORT, LCD_DC, 1);
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	82 e4       	ldi	r24, 0x42	; 66
 168:	0e 94 33 01 	call	0x266	; 0x266 <DIO_setpindir>
	
	DIO_write(LCD_PORT, LCD_RST, 0);
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	82 e4       	ldi	r24, 0x42	; 66
 172:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	80 e7       	ldi	r24, 0x70	; 112
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <LCD5110_init+0x2e>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD5110_init+0x38>
 186:	00 00       	nop
	_delay_ms(100);
	DIO_write(LCD_PORT, LCD_RST, 1);
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	82 e4       	ldi	r24, 0x42	; 66
 18e:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_write>
	
	spi_master_init();
 192:	0e 94 29 02 	call	0x452	; 0x452 <spi_master_init>
	
	LCD5110_send(0x21, LCD_CMD);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	81 e2       	ldi	r24, 0x21	; 33
 19a:	0e 94 89 00 	call	0x112	; 0x112 <LCD5110_send>
	LCD5110_send(0xB1, LCD_CMD);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	81 eb       	ldi	r24, 0xB1	; 177
 1a2:	0e 94 89 00 	call	0x112	; 0x112 <LCD5110_send>
	LCD5110_send(0x04, LCD_CMD);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	84 e0       	ldi	r24, 0x04	; 4
 1aa:	0e 94 89 00 	call	0x112	; 0x112 <LCD5110_send>
	LCD5110_send(0x14, LCD_CMD);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	84 e1       	ldi	r24, 0x14	; 20
 1b2:	0e 94 89 00 	call	0x112	; 0x112 <LCD5110_send>
	LCD5110_send(0x20, LCD_CMD);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	80 e2       	ldi	r24, 0x20	; 32
 1ba:	0e 94 89 00 	call	0x112	; 0x112 <LCD5110_send>
	LCD5110_send(0x0C, LCD_CMD);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	8c e0       	ldi	r24, 0x0C	; 12
 1c2:	0e 94 89 00 	call	0x112	; 0x112 <LCD5110_send>
	LCD5110_send(0xBF, LCD_CMD);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	8f eb       	ldi	r24, 0xBF	; 191
 1ca:	0e 94 89 00 	call	0x112	; 0x112 <LCD5110_send>
 1ce:	08 95       	ret

000001d0 <LCD_gotoXY>:
	for (uint16_t i = 0; i < LCD_WIDTH * LCD_HEIGHT / 8; i++) {
		LCD5110_send(0x00, LCD_DATA);
	}
	LCD_gotoXY(0, 0);
}
void LCD_gotoXY(unsigned char x, unsigned char y) {
 1d0:	cf 93       	push	r28
 1d2:	c6 2f       	mov	r28, r22
	LCD5110_send(0x80 | x, LCD_CMD); // Set X address (0 to 83)
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	80 68       	ori	r24, 0x80	; 128
 1d8:	0e 94 89 00 	call	0x112	; 0x112 <LCD5110_send>
	LCD5110_send(0x40 | y, LCD_CMD); // Set Y address (0 to 5)
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	8c 2f       	mov	r24, r28
 1e0:	80 64       	ori	r24, 0x40	; 64
 1e2:	0e 94 89 00 	call	0x112	; 0x112 <LCD5110_send>
}
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <LCD5110_clear>:
	LCD5110_send(0x20, LCD_CMD);
	LCD5110_send(0x0C, LCD_CMD);
	LCD5110_send(0xBF, LCD_CMD);
}

void LCD5110_clear(){
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	c8 ef       	ldi	r28, 0xF8	; 248
 1f0:	d1 e0       	ldi	r29, 0x01	; 1
	for (uint16_t i = 0; i < LCD_WIDTH * LCD_HEIGHT / 8; i++) {
		LCD5110_send(0x00, LCD_DATA);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 89 00 	call	0x112	; 0x112 <LCD5110_send>
 1fa:	21 97       	sbiw	r28, 0x01	; 1
	LCD5110_send(0x0C, LCD_CMD);
	LCD5110_send(0xBF, LCD_CMD);
}

void LCD5110_clear(){
	for (uint16_t i = 0; i < LCD_WIDTH * LCD_HEIGHT / 8; i++) {
 1fc:	d1 f7       	brne	.-12     	; 0x1f2 <LCD5110_clear+0x8>
		LCD5110_send(0x00, LCD_DATA);
	}
	LCD_gotoXY(0, 0);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_gotoXY>
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <LCD_char>:
void LCD_gotoXY(unsigned char x, unsigned char y) {
	LCD5110_send(0x80 | x, LCD_CMD); // Set X address (0 to 83)
	LCD5110_send(0x40 | y, LCD_CMD); // Set Y address (0 to 5)
}

void LCD_char(char c) {
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ec 01       	movw	r28, r24
 216:	cc 0f       	add	r28, r28
 218:	dd 1f       	adc	r29, r29
 21a:	cc 0f       	add	r28, r28
 21c:	dd 1f       	adc	r29, r29
 21e:	8c 0f       	add	r24, r28
 220:	9d 1f       	adc	r25, r29
 222:	ec 01       	movw	r28, r24
 224:	c0 54       	subi	r28, 0x40	; 64
 226:	d0 40       	sbci	r29, 0x00	; 0
	extern const unsigned char font[][5];
	for (unsigned char i = 0; i < 5; i++) {
 228:	10 e0       	ldi	r17, 0x00	; 0
		LCD5110_send(font[c - 32][i], LCD_DATA);
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	89 91       	ld	r24, Y+
 22e:	0e 94 89 00 	call	0x112	; 0x112 <LCD5110_send>
	LCD5110_send(0x40 | y, LCD_CMD); // Set Y address (0 to 5)
}

void LCD_char(char c) {
	extern const unsigned char font[][5];
	for (unsigned char i = 0; i < 5; i++) {
 232:	1f 5f       	subi	r17, 0xFF	; 255
 234:	15 30       	cpi	r17, 0x05	; 5
 236:	c9 f7       	brne	.-14     	; 0x22a <LCD_char+0x1e>
		LCD5110_send(font[c - 32][i], LCD_DATA);
	}
	LCD5110_send(0x00, LCD_DATA); // Space between characters
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 89 00 	call	0x112	; 0x112 <LCD5110_send>
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	08 95       	ret

00000248 <LCD_string>:

void LCD_string(const char *str) {
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	ec 01       	movw	r28, r24
	while (*str) {
 24e:	88 81       	ld	r24, Y
 250:	88 23       	and	r24, r24
 252:	31 f0       	breq	.+12     	; 0x260 <LCD_string+0x18>
 254:	21 96       	adiw	r28, 0x01	; 1
		LCD_char(*str++);
 256:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_char>
	}
	LCD5110_send(0x00, LCD_DATA); // Space between characters
}

void LCD_string(const char *str) {
	while (*str) {
 25a:	89 91       	ld	r24, Y+
 25c:	81 11       	cpse	r24, r1
 25e:	fb cf       	rjmp	.-10     	; 0x256 <LCD_string+0xe>
		LCD_char(*str++);
	}
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <DIO_setpindir>:
 */ 
#include <avr/io.h>
#include "std_macros.h"

void DIO_setpindir(char port, char pin, char dir){
	switch(port){
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	fc 01       	movw	r30, r24
 26a:	e1 54       	subi	r30, 0x41	; 65
 26c:	f1 09       	sbc	r31, r1
 26e:	e4 32       	cpi	r30, 0x24	; 36
 270:	f1 05       	cpc	r31, r1
 272:	08 f0       	brcs	.+2      	; 0x276 <DIO_setpindir+0x10>
 274:	67 c0       	rjmp	.+206    	; 0x344 <DIO_setpindir+0xde>
 276:	e6 5d       	subi	r30, 0xD6	; 214
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	0c 94 45 02 	jmp	0x48a	; 0x48a <__tablejump2__>
	case 'A':
	case 'a':
	
	if(dir == 1){
 27e:	41 30       	cpi	r20, 0x01	; 1
 280:	59 f4       	brne	.+22     	; 0x298 <DIO_setpindir+0x32>
		SET_BIT(DDRA, pin);
 282:	2a b3       	in	r18, 0x1a	; 26
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_setpindir+0x28>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_setpindir+0x24>
 292:	82 2b       	or	r24, r18
 294:	8a bb       	out	0x1a, r24	; 26
 296:	08 95       	ret
	}else{
		CLR_BIT(DDRA, pin);
 298:	2a b3       	in	r18, 0x1a	; 26
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_setpindir+0x3e>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_setpindir+0x3a>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	8a bb       	out	0x1a, r24	; 26
 2ae:	08 95       	ret
	}
	break;
	
	case 'B':
	case 'b':
	if(dir == 1){
 2b0:	41 30       	cpi	r20, 0x01	; 1
 2b2:	59 f4       	brne	.+22     	; 0x2ca <DIO_setpindir+0x64>
		SET_BIT(DDRB, pin);
 2b4:	27 b3       	in	r18, 0x17	; 23
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_setpindir+0x5a>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_setpindir+0x56>
 2c4:	82 2b       	or	r24, r18
 2c6:	87 bb       	out	0x17, r24	; 23
 2c8:	08 95       	ret
	}else{
		CLR_BIT(DDRB, pin);
 2ca:	27 b3       	in	r18, 0x17	; 23
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_setpindir+0x70>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_setpindir+0x6c>
 2da:	80 95       	com	r24
 2dc:	82 23       	and	r24, r18
 2de:	87 bb       	out	0x17, r24	; 23
 2e0:	08 95       	ret
	}
	break;
	
	case 'C':
	case 'c':
	if(dir == 1){
 2e2:	41 30       	cpi	r20, 0x01	; 1
 2e4:	59 f4       	brne	.+22     	; 0x2fc <DIO_setpindir+0x96>
		SET_BIT(DDRC, pin);
 2e6:	24 b3       	in	r18, 0x14	; 20
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_setpindir+0x8c>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_setpindir+0x88>
 2f6:	82 2b       	or	r24, r18
 2f8:	84 bb       	out	0x14, r24	; 20
 2fa:	08 95       	ret
	}
	else{
		CLR_BIT(DDRC, pin);
 2fc:	24 b3       	in	r18, 0x14	; 20
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_setpindir+0xa2>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_setpindir+0x9e>
 30c:	80 95       	com	r24
 30e:	82 23       	and	r24, r18
 310:	84 bb       	out	0x14, r24	; 20
 312:	08 95       	ret
	}
	break;
	
	case 'D':
	case 'd':
	if(dir == 1){
 314:	41 30       	cpi	r20, 0x01	; 1
 316:	59 f4       	brne	.+22     	; 0x32e <DIO_setpindir+0xc8>
		SET_BIT(DDRD, pin);
 318:	21 b3       	in	r18, 0x11	; 17
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_setpindir+0xbe>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_setpindir+0xba>
 328:	82 2b       	or	r24, r18
 32a:	81 bb       	out	0x11, r24	; 17
 32c:	08 95       	ret
	}else{
		CLR_BIT(DDRD, pin);
 32e:	21 b3       	in	r18, 0x11	; 17
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_setpindir+0xd4>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_setpindir+0xd0>
 33e:	80 95       	com	r24
 340:	82 23       	and	r24, r18
 342:	81 bb       	out	0x11, r24	; 17
 344:	08 95       	ret

00000346 <DIO_write>:
	default: break;
	}
}

void DIO_write(char port, char pin, char val){
	switch(port){
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	fc 01       	movw	r30, r24
 34a:	e1 54       	subi	r30, 0x41	; 65
 34c:	f1 09       	sbc	r31, r1
 34e:	e4 32       	cpi	r30, 0x24	; 36
 350:	f1 05       	cpc	r31, r1
 352:	08 f0       	brcs	.+2      	; 0x356 <DIO_write+0x10>
 354:	67 c0       	rjmp	.+206    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 356:	e2 5b       	subi	r30, 0xB2	; 178
 358:	ff 4f       	sbci	r31, 0xFF	; 255
 35a:	0c 94 45 02 	jmp	0x48a	; 0x48a <__tablejump2__>
		case 'A':
		case 'a':
		
		if(val == 1){
 35e:	41 30       	cpi	r20, 0x01	; 1
 360:	59 f4       	brne	.+22     	; 0x378 <DIO_write+0x32>
			SET_BIT(PORTA, pin);
 362:	2b b3       	in	r18, 0x1b	; 27
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_write+0x28>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_write+0x24>
 372:	82 2b       	or	r24, r18
 374:	8b bb       	out	0x1b, r24	; 27
 376:	08 95       	ret
		}else{
			CLR_BIT(PORTA, pin);
 378:	2b b3       	in	r18, 0x1b	; 27
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_write+0x3e>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_write+0x3a>
 388:	80 95       	com	r24
 38a:	82 23       	and	r24, r18
 38c:	8b bb       	out	0x1b, r24	; 27
 38e:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if(val == 1){
 390:	41 30       	cpi	r20, 0x01	; 1
 392:	59 f4       	brne	.+22     	; 0x3aa <DIO_write+0x64>
			SET_BIT(PORTB, pin);
 394:	28 b3       	in	r18, 0x18	; 24
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_write+0x5a>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_write+0x56>
 3a4:	82 2b       	or	r24, r18
 3a6:	88 bb       	out	0x18, r24	; 24
 3a8:	08 95       	ret
		}else{
			CLR_BIT(PORTB, pin);
 3aa:	28 b3       	in	r18, 0x18	; 24
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_write+0x70>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_write+0x6c>
 3ba:	80 95       	com	r24
 3bc:	82 23       	and	r24, r18
 3be:	88 bb       	out	0x18, r24	; 24
 3c0:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if(val == 1){
 3c2:	41 30       	cpi	r20, 0x01	; 1
 3c4:	59 f4       	brne	.+22     	; 0x3dc <DIO_write+0x96>
			SET_BIT(PORTC, pin);
 3c6:	25 b3       	in	r18, 0x15	; 21
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_write+0x8c>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_write+0x88>
 3d6:	82 2b       	or	r24, r18
 3d8:	85 bb       	out	0x15, r24	; 21
 3da:	08 95       	ret
		}else{
			CLR_BIT(PORTC, pin);
 3dc:	25 b3       	in	r18, 0x15	; 21
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_write+0xa2>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_write+0x9e>
 3ec:	80 95       	com	r24
 3ee:	82 23       	and	r24, r18
 3f0:	85 bb       	out	0x15, r24	; 21
 3f2:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if(val == 1){
 3f4:	41 30       	cpi	r20, 0x01	; 1
 3f6:	59 f4       	brne	.+22     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			SET_BIT(PORTD, pin);
 3f8:	22 b3       	in	r18, 0x12	; 18
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	82 2b       	or	r24, r18
 40a:	82 bb       	out	0x12, r24	; 18
 40c:	08 95       	ret
		}else{
			CLR_BIT(PORTD, pin);
 40e:	22 b3       	in	r18, 0x12	; 18
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41e:	80 95       	com	r24
 420:	82 23       	and	r24, r18
 422:	82 bb       	out	0x12, r24	; 18
 424:	08 95       	ret

00000426 <main>:
#include <util/delay.h>


int main(void)
{
	LCD5110_init();
 426:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD5110_init>
 42a:	2f ef       	ldi	r18, 0xFF	; 255
 42c:	89 e6       	ldi	r24, 0x69	; 105
 42e:	98 e1       	ldi	r25, 0x18	; 24
 430:	21 50       	subi	r18, 0x01	; 1
 432:	80 40       	sbci	r24, 0x00	; 0
 434:	90 40       	sbci	r25, 0x00	; 0
 436:	e1 f7       	brne	.-8      	; 0x430 <main+0xa>
 438:	00 c0       	rjmp	.+0      	; 0x43a <main+0x14>
 43a:	00 00       	nop
	_delay_ms(1000);
	
	LCD5110_clear();
 43c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD5110_clear>
	LCD_gotoXY(0, 0);
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_gotoXY>
	
	LCD_string("Hello, 5110 :)");
 448:	80 e4       	ldi	r24, 0x40	; 64
 44a:	92 e0       	ldi	r25, 0x02	; 2
 44c:	0e 94 24 01 	call	0x248	; 0x248 <LCD_string>
 450:	ff cf       	rjmp	.-2      	; 0x450 <main+0x2a>

00000452 <spi_master_init>:

void spi_slave_init(void){
	
	SET_BIT(SPCR, SPE);
	
	DIO_setpindir('B', 6, 1);
 452:	41 e0       	ldi	r20, 0x01	; 1
 454:	64 e0       	ldi	r22, 0x04	; 4
 456:	82 e4       	ldi	r24, 0x42	; 66
 458:	0e 94 33 01 	call	0x266	; 0x266 <DIO_setpindir>
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	65 e0       	ldi	r22, 0x05	; 5
 460:	82 e4       	ldi	r24, 0x42	; 66
 462:	0e 94 33 01 	call	0x266	; 0x266 <DIO_setpindir>
 466:	41 e0       	ldi	r20, 0x01	; 1
 468:	67 e0       	ldi	r22, 0x07	; 7
 46a:	82 e4       	ldi	r24, 0x42	; 66
 46c:	0e 94 33 01 	call	0x266	; 0x266 <DIO_setpindir>
 470:	6c 9a       	sbi	0x0d, 4	; 13
 472:	68 9a       	sbi	0x0d, 0	; 13
 474:	6e 9a       	sbi	0x0d, 6	; 13
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	64 e0       	ldi	r22, 0x04	; 4
 47a:	82 e4       	ldi	r24, 0x42	; 66
 47c:	0e 94 a3 01 	call	0x346	; 0x346 <DIO_write>
 480:	08 95       	ret

00000482 <spi_master_send>:
}

void spi_master_send(unsigned char data){
	SPDR = data;
 482:	8f b9       	out	0x0f, r24	; 15
	while(READ_BIT(SPSR,SPIF) == 0);
 484:	77 9b       	sbis	0x0e, 7	; 14
 486:	fe cf       	rjmp	.-4      	; 0x484 <spi_master_send+0x2>
}
 488:	08 95       	ret

0000048a <__tablejump2__>:
 48a:	ee 0f       	add	r30, r30
 48c:	ff 1f       	adc	r31, r31
 48e:	05 90       	lpm	r0, Z+
 490:	f4 91       	lpm	r31, Z
 492:	e0 2d       	mov	r30, r0
 494:	09 94       	ijmp

00000496 <_exit>:
 496:	f8 94       	cli

00000498 <__stop_program>:
 498:	ff cf       	rjmp	.-2      	; 0x498 <__stop_program>
